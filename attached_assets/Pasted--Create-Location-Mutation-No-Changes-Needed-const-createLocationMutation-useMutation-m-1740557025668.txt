
Create Location Mutation (No Changes Needed):

const createLocationMutation = useMutation({
  mutationFn: async (data: z.infer<typeof locationFormSchema>) => {
    try {
      const response = await fetch(`/api/organizations/${organization?.id}/settings`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'locations',
          value: data,
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Server response:', errorData);
        throw new Error(errorData || 'Failed to create location');
      }

      const jsonData = await response.json();
      return jsonData;
    } catch (error) {
      console.error('Location creation error:', error);
      throw error;
    }
  },
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: [`/api/organizations/${organization?.id}/settings`] });
    toast({
      title: "Success",
      description: "Location created successfully",
    });
    setIsCreateDialogOpen(false);
    form.reset();
  },
  onError: (error: Error) => {
    console.error('Location creation error:', error);
    toast({
      title: "Error",
      description: error.message || "Failed to create location",
      variant: "destructive",
    });
  },
});
Use code with caution.
JavaScript
Edit Location Mutation:

const editLocationMutation = useMutation({
  mutationFn: async (data: z.infer<typeof locationFormSchema>) => {
    try {
      const response = await fetch(`/api/organizations/${organization?.id}/settings`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'locations',
          action: 'update',
          value: selectedLocation.id, //  <--- ID of the location
          data: data, // The updated data for the location
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Server response:', errorData);
        throw new Error(errorData || 'Failed to update location');
      }

      const jsonData = await response.json();
      console.log('Update response:', jsonData);
      return jsonData;
    } catch (error) {
      console.error('Location update error:', error);
      throw error;
    }
  },
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: [`/api/organizations/${organization?.id}/settings`] });
    toast({
      title: "Success",
      description: "Location updated successfully",
    });
    setIsEditDialogOpen(false);
    setSelectedLocation(null);
    editForm.reset();
  },
  onError: (error: Error) => {
    toast({
      title: "Error",
      description: error.message || "Failed to update location",
      variant: "destructive",
    });
  },
});
Use code with caution.
JavaScript
Delete Location Mutation:

const deleteLocationMutation = useMutation({
  mutationFn: async () => {
    try {
      const response = await fetch(`/api/organizations/${organization?.id}/settings`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'locations',
          action: 'delete',
          value: selectedLocation.id,  // <--- the ID of the location to delete
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Server response:', errorData);
        throw new Error(errorData || 'Failed to delete location');
      }

      const jsonData = await response.json();
      console.log('Delete response:', jsonData);
      return jsonData;
    } catch (error) {
      console.error('Location deletion error:', error);
      throw error;
    }
  },
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: [`/api/organizations/${organization?.id}/settings`] });
    toast({
      title: "Success",
      description: "Location deleted successfully",
    });
    setIsDeleteDialogOpen(false);
    setSelectedLocation(null);
    setDeleteConfirmation("");
  },
  onError: (error: Error) => {
    toast({
      title: "Error",
      description: error.message || "Failed to delete location",
      variant: "destructive",
    });
  },
});
